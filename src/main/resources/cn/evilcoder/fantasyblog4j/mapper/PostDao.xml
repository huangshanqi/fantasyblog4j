<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright 2009-2012 the original author or authors. Licensed under the
	Apache License, Version 2.0 (the "License"); you may not use this file except
	in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software distributed
	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
	OR CONDITIONS OF ANY KIND, either express or implied. See the License for
	the specific language governing permissions and limitations under the License. -->

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="cn.evilcoder.fantasyblog4j.dao.PostDao">
    <resultMap id="PostMap" type="post">
        <id column="id" property="id"/>
        <result column="uid" property="uid"/>
        <result column="title" property="title"/>
        <result column="category" property="category"/>
        <result column="tags" property="tags"/>
        <result column="visit_time" property="visitTime"/>
        <result column="comment_num" property="commentNum"/>
        <result column="ctime" property="ctime"/>
        <result column="mtime" property="mtime"/>
        <result column="state" property="state"/>
    </resultMap>
    <resultMap id="PostDetailMap" type="postDetail">
        <id column="id" property="id"/>
        <result column="pid" property="pid"/>
        <result column="content" property="content"/>
        <result column="ctime" property="ctime"/>
        <result column="mtime" property="mtime"/>
    </resultMap>
    <resultMap id="PostDetailModelMap" type="postDetailModel">
        <result column="post_uid" property="uid"/>
        <result column="post_username" property="username"/>
        <result column="post_id" property="pid"/>
        <result column="post_title" property="title"/>
        <result column="post_content" property="content"/>
        <result column="post_category" property="category"/>
        <result column="post_tags" property="tagsStr"/>
        <result column="post_visit_time" property="visitTime"/>
        <result column="post_comment_num" property="commentNum"/>
        <result column="post_ctime" property="ctime"/>
        <result column="post_state" property="state"/>
    </resultMap>

    <resultMap id="PostItemModelMap" type="postItemModel">
        <result column="post_uid" property="uid"/>
        <result column="post_username" property="username"/>
        <result column="post_id" property="pid"/>
        <result column="post_title" property="title"/>
        <result column="post_category" property="category"/>
        <result column="post_tags" property="tagsStr"/>
        <result column="post_visit_time" property="visitTime"/>
        <result column="post_comment_num" property="commentNum"/>
        <result column="post_ctime" property="ctime"/>
        <result column="state" property="state"/>
    </resultMap>
    <insert id="insertPost" useGeneratedKeys="true" parameterType="post" keyProperty="id">
        insert into
        p_post(uid,title,category,tags,visit_time,comment_num,ctime,mtime,state)
        values(#{uid},#{title},#{category},#{tags},#{visitTime},#{commentNum},#{ctime},#{mtime},#{state})
    </insert>

    <update id="updatePost" parameterType="post">
        UPDATE p_post SET
        title = #{title},
        category = #{category},
        tags = #{tags},
        ctime = #{ctime},
        mtime = #{mtime},
        state = #{state}
        WHERE id = #{id}
    </update>

    <insert id="insertPostDetail" useGeneratedKeys="true" parameterType="postDetail" keyProperty="id">
        insert into
        p_post_detail(pid,content,ctime,mtime)
        values(#{pid},#{content},#{ctime},#{ctime})
    </insert>

    <update id="updatePostDetail" parameterType="postDetail">
        UPDATE p_post_detail SET
        content = #{content},
        mtime = #{mtime}
        WHERE pid = #{pid}
    </update>

    <select id="selectPostDetailWithState"  resultMap="PostDetailModelMap" >
        SELECT
            P.id AS post_id,
            P.title AS post_title,
            D.content AS post_content,
            P.category AS post_category,
            P.tags AS post_tags,
            P.visit_time  AS post_visit_time,
            P.comment_num  AS post_comment_num,
            P.ctime AS post_ctime,
            U.id AS post_uid,
            U.username AS post_username,
            P.state AS post_state
        FROM p_post P
            LEFT JOIN u_user U on P.uid = U.id
            LEFT JOIN p_post_detail D ON D.pid = P.id
        WHERE P.id = #{pid} and P.state = #{state}
        limit 1
    </select>

    <select id="selectPostDetailWithoutState"  resultMap="PostDetailModelMap" >
        SELECT
        P.id AS post_id,
        P.title AS post_title,
        D.content AS post_content,
        P.category AS post_category,
        P.tags AS post_tags,
        P.visit_time  AS post_visit_time,
        P.comment_num  AS post_comment_num,
        P.ctime AS post_ctime,
        U.id AS post_uid,
        U.username AS post_username,
        P.state AS post_state
        FROM p_post P
        LEFT JOIN u_user U on P.uid = U.id
        LEFT JOIN p_post_detail D ON D.pid = P.id
        WHERE P.id = #{pid}
        limit 1
    </select>



    <update id="addPostViewTime" parameterType="long">
        UPDATE p_post
        SET visit_time = visit_time+1
        WHERE id = #{pid}
    </update>
    <update id="addPostCommentNum" parameterType="long">
        UPDATE p_post
        SET comment_num = comment_num+1
        WHERE id = #{pid}
    </update>

    <select id="search" resultMap="PostItemModelMap" useCache="true" parameterType="queryModel">
        SELECT
        P.id AS post_id,
        P.title AS post_title,
        P.category AS post_category,
        P.tags AS post_tags,
        P.visit_time AS post_visit_time,
        P.comment_num AS post_comment_num,
        P.ctime AS post_ctime,
        U.id AS post_uid,
        U.username AS post_username,
        P.state
        FROM p_post P
        LEFT JOIN
        u_user U on P.uid = U.id
        <where>
            state = 0
            <if test="uid > 0">
                and P.uid = #{uid}
            </if>
            <if test="category != null">
                AND P.category = #{category}
            </if>
            <if test="tag != null">
                AND P.tags LIKE CONCAT('%',#{tag},'%')
            </if>
            <if test="keyword != null">
                AND (P.title LIKE CONCAT('%',#{keyword},'%') OR P.tags LIKE CONCAT('%',#{keyword},'%') OR P.category LIKE CONCAT('%',#{keyword},'%'))
            </if>
        </where>
        ORDER BY post_ctime DESC limit #{offset},#{pageSize}
    </select>

    <select id="getPopPosts" resultMap="PostMap" useCache="true" >
        SELECT * FROM p_post
        WHERE state = 0
        ORDER BY visit_time DESC
        limit 10
    </select>
    <select id="getNewPosts" resultMap="PostMap" useCache="true" >
        SELECT * FROM p_post
        WHERE state = 0
        ORDER BY ctime DESC
        limit 10
    </select>

    <select id="getUserCats" parameterType="long" resultMap="cn.evilcoder.fantasyblog4j.dao.PostTagDao.KVMap" useCache="true">
        SELECT category as k,count(*) as v
        FROM p_post
        WHERE uid = #{uid} and state = 0
        GROUP BY category
        ORDER BY v DESC
    </select>


    <select id="getAllCats" resultMap="cn.evilcoder.fantasyblog4j.dao.PostTagDao.KVMap" useCache="true">
        SELECT category as k,count(*) as v
        FROM p_post
        WHERE state = 0
        GROUP BY category
        ORDER BY v DESC
    </select>

    <update id="batchUpdatePostTag" parameterType="java.util.ArrayList" >
        <foreach collection="list" item="post" index="index" separator=";" open="" close="">
            UPDATE p_post
            <set>
                tags = #{post.tags}
            </set>
            WHERE id = #{post.id}
        </foreach>

    </update>

    <select id="getUserPostForManager" useCache="true" resultMap="PostMap" >
        select * FROM p_post
        WHERE uid = #{uid}
        ORDER BY ctime DESC
        limit #{offset},#{pageSize}
    </select>

    <delete id="deletePost">
        DELETE FROM p_post
        WHERE id = #{pid} and uid = #{uid}
    </delete>
    <delete id="deletePostDetail" parameterType="long">
        DELETE FROM p_post_detail
        WHERE pid = #{pid}
    </delete>

    <select id="getById" parameterType="long" resultMap="PostMap" useCache="true" >
        SELECT * FROM p_post
        WHENEVER id = #{id}
        limit 1
    </select>
</mapper>
